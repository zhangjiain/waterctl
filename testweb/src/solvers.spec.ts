import { expect, test } from "vitest";
import { makeUnlockResponse, makeStartEpilogue, makeStartEpilogueOfflinebomb } from "./solvers";
import { bufferToHexString } from "./utils";
import { crc16changgong } from "./algorithms";

const deviceName = "Water33982";

function formatDateToString(date: Date): string {
  const year = date.getFullYear().toString().slice(-2);
  const month = (date.getMonth() + 1).toString().padStart(2, "0");
  const day = date.getDate().toString().padStart(2, "0");
  const hours = date.getHours().toString().padStart(2, "0");
  const minutes = date.getMinutes().toString().padStart(2, "0");
  const seconds = date.getSeconds().toString().padStart(2, "0");
  return `${year}${month}${day}${hours}${minutes}${seconds}`;
}

test("makeUnlockResponse", async () => {
  expect(
    await makeUnlockResponse(
      new Uint8Array([0xfd, 0xfd, 0x09, 0xae, 0x38, 0x00, 0x00, 0x05, 0x95, 0x27, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12]).buffer,
      deviceName,
    ),
  ).toEqual(new Uint8Array([0xfe, 0xfe, 0x09, 0xaf, 0x72, 0x00, 0x00, 0x06, 0xc3, 0x50, 0x9a, 0xc4, 0xfe, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]));

  expect(
    await makeUnlockResponse(
      new Uint8Array([0xfd, 0xfd, 0x09, 0xae, 0xa2, 0x00, 0x9b, 0x05, 0x95, 0x27, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12]).buffer,
      deviceName,
    ),
  ).toEqual(new Uint8Array([0xfe, 0xfe, 0x09, 0xaf, 0x44, 0x00, 0x9b, 0x06, 0xf1, 0x30, 0x9a, 0xd3, 0xfe, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]));

  expect(
    await makeUnlockResponse(
      new Uint8Array([0xfd, 0xfd, 0x09, 0xae, 0x5b, 0x39, 0x9b, 0x05, 0x95, 0x27, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12]).buffer,
      deviceName,
    ),
  ).toEqual(new Uint8Array([0xfe, 0xfe, 0x09, 0xaf, 0xbd, 0x39, 0x9b, 0x06, 0xf1, 0x30, 0x9a, 0xd3, 0xfe, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]));

  expect(
    await makeUnlockResponse(
      new Uint8Array([0xfd, 0xfd, 0x09, 0xae, 0x9f, 0x00, 0xff, 0xff, 0x95, 0x27, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12]).buffer,
      deviceName,
    ),
  ).toEqual(new Uint8Array([0xfe, 0xfe, 0x09, 0xaf, 0xd9, 0x00, 0x01, 0x00, 0xd6, 0xac, 0x3f, 0x3b, 0xfe, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]));

  expect(
    await makeUnlockResponse(
      new Uint8Array([0xfd, 0xfd, 0x09, 0xae, 0xb3, 0x00, 0x34, 0x64, 0x80, 0x14, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12]).buffer,
      deviceName,
    ),
  ).toEqual(new Uint8Array([0xfe, 0xfe, 0x09, 0xaf, 0xb1, 0x00, 0x34, 0x65, 0xd6, 0x28, 0x9a, 0xc1, 0xfe, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]));

  expect(
    await makeUnlockResponse(
      new Uint8Array([0xfd, 0xfd, 0x09, 0xae, 0x01, 0x00, 0x81, 0xff, 0x68, 0x30, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12]).buffer,
      deviceName,
    ),
  ).toEqual(new Uint8Array([0xfe, 0xfe, 0x09, 0xaf, 0x68, 0x00, 0x82, 0x00, 0xf1, 0x12, 0xb2, 0x21, 0xfe, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]));

  expect(
    await makeUnlockResponse(
      new Uint8Array([0xfd, 0xfd, 0x09, 0xae, 0xe5, 0x00, 0x01, 0xff, 0x73, 0x24, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12]).buffer,
      deviceName,
    ),
  ).toEqual(new Uint8Array([0xfe, 0xfe, 0x09, 0xaf, 0x4b, 0x00, 0x02, 0x00, 0xcc, 0xca, 0x9a, 0x20, 0xfe, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]));
});

test("makeStartEpilogue Old Firmware", () => {
  const response = makeStartEpilogue(deviceName);

  expect(response.slice(0, 5)).toEqual(new Uint8Array([0xfe, 0xfe, 0x09, 0xb2, 0x01]));

  const checksum = response[5] | (response[6] << 8);
  expect(checksum).toEqual(crc16changgong(deviceName.slice(-5)));

  expect(response.slice(7, 9)).toEqual(new Uint8Array([0xff, 0x00]));

  const randomUserId = response.slice(9, 11);
  expect(randomUserId).toHaveLength(2);

  const datetimeString = bufferToHexString(response.slice(11, 17).buffer);
  expect(datetimeString).toEqual(formatDateToString(new Date()));

  const footer = response.slice(17, 20);
  expect(footer).toEqual(new Uint8Array([0x0f, 0x27, 0x00]));
});

test("makeStartEpilogue New Firmware", () => {
  const response = makeStartEpilogue(deviceName, true);

  expect(response.slice(0, 5)).toEqual(new Uint8Array([0xfe, 0xfe, 0x09, 0xb2, 0x01]));

  const checksum = response[5] | (response[6] << 8);
  expect(checksum).toEqual(crc16changgong(deviceName.slice(-5)));

  expect(response.slice(7, 9)).toEqual(new Uint8Array([0x0b, 0x00]));

  const randomUserId = response.slice(9, 11);
  expect(randomUserId).toHaveLength(2);

  const datetimeString = bufferToHexString(response.slice(11, 17).buffer);
  expect(datetimeString).toEqual(formatDateToString(new Date()));

  const footer = response.slice(17, 20);
  expect(footer).toEqual(new Uint8Array([0x0f, 0x27, 0x00]));
});

test("makeStartEpilogueOfflinebomb", () => {
  const response = makeStartEpilogueOfflinebomb();

  const header = response.slice(0, 9);
  expect(header).toEqual(new Uint8Array([0xfe, 0xfe, 0x09, 0xbb, 0x01, 0x01, 0x0d, 0x00, 0x50]));

  const randomUserId = response.slice(9, 11);
  expect(randomUserId).toHaveLength(2);

  const datetimeString = bufferToHexString(response.slice(11, 17).buffer);
  expect(datetimeString).toEqual(formatDateToString(new Date()));

  const footer = response.slice(17, 20);
  expect(footer).toEqual(new Uint8Array([0x00, 0x20, 0x00]));
});
